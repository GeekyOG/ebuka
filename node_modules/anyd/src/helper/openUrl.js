const { exec } = require( "child_process" );

// child_process.exec(command[, options][, callback])
// command <string> 要运行的命令,用空格分隔参数.
// options <Object>
// cwd <string> 子进程的当前工作目录.
// env <Object> 环境变量键值对.
// encoding <string> 默认为 'utf8'.
// shell <string> 用于执行命令的 shell,在 UNIX 上默认为 '/bin/sh',在 Windows 上默认为 process.env.ComSpec.
//		详见 Shell Requirements 与 Default Windows Shell.
// timeout <number> 默认为 0.
// maxBuffer <number> stdout 或 stderr 允许的最大字节数.
//		默认为 200*1024.如果超过限制,则子进程会被终止.查看警告:maxBuffer and Unicode.
// killSignal <string> | <integer> 默认为 'SIGTERM'.
// uid <number> 设置该进程的用户标识.(详见 setuid(2))
// gid <number> 设置该进程的组标识.(详见 setgid(2))
// windowsHide <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.
// callback <Function> 当进程终止时调用,并带上输出.
// error <Error>
// stdout <string> | <Buffer>
// stderr <string> | <Buffer>
// 返回: <ChildProcess>
// 衍生一个 shell,然后在 shell 中执行 command,且缓冲任何产生的输出.
// 传入 exec 函数的 command 字符串会被 shell 直接处理,特殊字符(因 shell 而异)需要相应处理：

// process.platform属性返回字符串,标识Node.js进程运行其上的操作系统平台.例如'darwin','freebsd','linux','sunos'或'win32'

/*
	接收一个参数,帮助打开浏览器
*/
module.exports = url => {
	switch ( process.platform ) {
		case 'darwin' : exec( `open ${url}` );break;
		case 'win32' : exec( `start ${url}` );break;
	}
}

